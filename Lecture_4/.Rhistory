knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyverse)
library(ggrepel)
library(readr)
library(scales)
TertEduEU_table <- read_csv("../sourcedata/TertiaryEduEU_EuroStat_Correct.csv",
col_types = cols(SEX = col_skip(), AGE = col_skip(),
UNIT = col_skip()))
colnames(TertEduEU_table) <- c("Year",
"Country",
"Type of Education",
"Percentage")
TertEduEU_table$Year <- as.integer(TertEduEU_table$Year)
TertEduEU_table$Year <- as.integer(TertEduEU_table$Year)
TertEduEU_table$Percentage <- as.numeric(TertEduEU_table$Percentage)
TertEduEU_table[TertEduEU_table$Country ==
"Germany (until 1990 former territory of the FRG)",
"Country"] <- "Germany"
TertEduEU_table[TertEduEU_table$Country ==
"European Union - 28 countries (2013-2020)",
"Country"] <- "EU 28"
TertEduEU_table[TertEduEU_table$Country ==
"Euro area - 19 countries  (from 2015)",
"Country"] <- "Euro area"
TertEduEU_table <- TertEduEU_table[!TertEduEU_table$Country
%in%
c("European Union - 27 countries (from 2020)",
"European Union - 15 countries (1995-2004)"), ]
TertEduEU_table <- TertEduEU_table %>%
mutate(EU = as.factor(ifelse(Country == "EU 28", 1, 0)))
TertEduEU_table %>%
filter_all(any_vars(is.na(.)))
TertEduEU_table <- TertEduEU_table  %>%
drop_na()
TertEduEU_2019 <- TertEduEU_table[((TertEduEU_table$Year == 2019) &
(TertEduEU_table$`Type of Education` ==
"Tertiary education (levels 5-8)")), ]
ggplot() +
geom_bar(data = TertEduEU_2019, aes(x = reorder(Country, -Percentage),
weight = Percentage,
fill = EU)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Tertiary enrollment in European Countries in 2019",
caption = "Source: EuroStat",
x = "",
y = "% of population") +
scale_fill_manual(values = c("darkslategray4", "blue")) +
theme(legend.position = "none")
TertEduEU_EU_EA <- TertEduEU_table[TertEduEU_table$Country %in% c("EU 28",
"Euro area",
"Luxembourg",
"Germany",
"Belgium",
"France",
"Romania"), ]
TertEduEU_EU_EA <- TertEduEU_EU_EA[TertEduEU_EU_EA$`Type of Education` ==
"Tertiary education (levels 5-8)", ]
ggplot() +
geom_line(data = TertEduEU_EU_EA, aes(x = Year,
y = Percentage,
color = Country)) +
labs(title = "Percentage of population that graduated from Tertiary Education",
y = "% of population",
x = "Year",
color = "",
caption = "Source: EuroStat") +
scale_x_continuous(breaks = c(2010:2019)) +
ylim(0, 50)
GDP_table <- read_excel("../sourcedata/GDP_EU_EuroStat.xlsx",
sheet = "Sheet 1", skip = 8, n_max = 40)
GDP_table <- GDP_table[! GDP_table$TIME == "GEO (Labels)" &
! GDP_table$TIME ==
"European Union - 27 countries (from 2020)", ]
GDP_table[GDP_table$TIME == "Germany (until 1990 former territory of the FRG)",
"Country"] <- "Germany"
GDP_table[GDP_table$TIME == "European Union - 28 countries (2013-2020)",
"Country"] <- "EU 28"
GDP_table[GDP_table$TIME == "Euro area - 19 countries  (from 2015)",
"Country"] <- "Euro area"
colnames(GDP_table)[1] <- "Country"
GDP_table <- GDP_table  %>%
select("Country", "2019")
GDP_table$GDPperCap <- as.integer(GDP_table$`2019`)
Guatemala$`Interest Rate` <- as.numeric(Guatemala$`Interest Rate`)
View(TertEduEU_EU_EA)
View(TertEduEU_EU_EA)
Test <- select(data = TertEduEU_EU_EA, -EU)
Test <- select(data = TertEduEU_EU_EA, EU)
Test <- select(TertEduEU_EU_EA, EU)
Test <- select(TertEduEU_EU_EA, -EU)
Test <- TertEduEU_EU_EA[TertEduEU_EU_EA$Year == 2010]
Test <- TertEduEU_EU_EA[, TertEduEU_EU_EA$Year == 2010]
Test <- TertEduEU_EU_EA[TertEduEU_EU_EA$Year == 2010]
Test <- TertEduEU_EU_EA[TertEduEU_EU_EA$Year == 2010, ]
Test <- TertEduEU_EU_EA[, Percentage]
Test <- TertEduEU_EU_EA[, c(Percentage)]
Test <- TertEduEU_EU_EA[, "Percentage"]
Test <- TertEduEU_EU_EA[ , "Percentage"]
View(Test)
View(Test)
Test <- TertEduEU_EU_EA[ TertEduEU_EU_EA$Country == "Belgium",]
View(Test)
View(Test)
Test <- TertEduEU_EU_EA[TertEduEU_EU_EA$Country == "Belgium",]
TertEduEU_EU_EA$`Type of Education`
Test <- TertEduEU_EU_EA[TertEduEU_EU_EA$Country == "Belgium", "Percentage"]
Test <- TertEduEU_EU_EA[(TertEduEU_EU_EA$Country == "Belgium") & (TertEduEU_EU_EA$Year == 2010), "Percentage"]
Test <- TertEduEU_EU_EA[(TertEduEU_EU_EA$Country == "Belgium") & (TertEduEU_EU_EA$Year == 2010), "Percentage"]
TertEduEU_EU_EA[1, 1]
Test <- TertEduEU_EU_EA[(TertEduEU_EU_EA$Country == "Belgium") & (TertEduEU_EU_EA$Year == 2010), "Percentage"]
TertEduEU_EU_EA[5, 2]
TertEduEU_EU_EA[, "Percentage"]
TertEduEU_EU_EA[, 4
TertEduEU_EU_EA[, 4]
TertEduEU_EU_EA[(TertEduEU_EU_EA$Country == "Belgium"), 4]
TertEduEU_EU_EA[(TertEduEU_EU_EA$Country == "Belgium"), c(3, 4) ]
TertEduEU_EU_EA[(TertEduEU_EU_EA$Country == "Belgium"), -c(3, 4) ]
TertEduEU_EU_EA[), -c(3, 4) ]
TertEduEU_EU_EA[, -c(3, 4) ]
TertEduEU_EU_EA[, -c(3) ]
# Your code here
library(tidyverse)
?mean
my_data <- c(1,2,3, NA)
mean(my_data)
mean(my_data, na.rm = FALSE)
mean(my_data, na.rm = TRUE)
?sum
log(x = 100, 10)
# log(100)
# log(base = exp(1))
# log(exp(1)^3, exp(1))
# log(base = 10, x = 100)
log(x = 100, 10)
log(100)
log(base = exp(1))
log(x = 100, 10)
log(100)
# log(base = exp(1))
log(exp(1)^3, exp(1))
log(base = 10, x = 100)
square <- function(x){
x * x
}
a <- 3
square(a)
b <- c(1, 3)
square(b)
# function 'paste_together' can paste two strings together
paste_together <- function (...) {
paste(..., spe = " ")
}
# Test your function by excuting the code below
# paste two variables and create a new string
paste_together("house number", 110)
# use a vector for one of the arguments
paste_together("letter", LETTERS)
for (i in 1:10){
print(i)
}
# my cool new function
my_func <- function(x){
total <- 0
for (...) {
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + squared_plus(i)
}
return total
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + squared_plus(i)
}
total
}
# test your new function
my_func(2)
square_plus <- function(x, y = 1){
x * x + y
}
# use 2 arguments
square_plus(3, 5)
# use the default for the second argument
square_plus(3)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + squared_plus(i)
}
total
}
# test your new function
my_func(2)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + squared_plus(i)
}
total
}
# test your new function
my_func(2)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + square_plus(i)
}
total
}
# test your new function
my_func(2)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + square_plus(i)
}
total
}
# test your new function
my_func(1)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + square_plus(i)
}
total
}
# test your new function
my_func(2)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + square_plus(i)
}
print(total)
}
# test your new function
my_func(2)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+1)) {
total <- total + square_plus(i)
}
print(total)
}
# test your new function
my_func(2)
# my cool new function
my_func <- function(x){
total <- 0
for (i in x:(x+10)) {
total <- total + square_plus(i)
}
print(total)
}
# test your new function
my_func(2)
vec <- c(2, 4, 6, 9)
vec^2
# my cool new function
my_func <- function(x){
# your code here
variance <- mean(x^2) -(mean(x))^2
variance
}
# test your function,
N <- length(vec)
corr <- N/(N-1)
my_func(vec) * corr
# should be equal
var(vec)
# your code here
df_2018 <- readRDS("../sourcedata/clothing_exports_aggregated.rds")
clothing_exports_aggregated <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
View(clothing_exports_aggregated)
View(clothing_exports_aggregated)
# your code here
df_2018 <- readRDS(readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
View(clothing_exports_aggregated)
View(df_2018)
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
View(df_2018)
View(df_2018)
View(df_2018)
View(df_2018)
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
length(unique_values)
df_2018["reporter_fullname_english"]
unique_values
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
len(unique_values)
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
length(unique_values)
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
nrow(unique_values)
df_tmp <- df_2018 %>% filter(reporter_iso == "chn") %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
plot_top_five_receiving_countries(dataset, country_code){
plot_top_five_receiving_countries(dataset, country_code) {
plot_top_five_receiving_countries(dataset, country_code){
plot_top_five_receiving_countries(...){
df_tmp <- df_2018 %>% filter(reporter_iso == "chn") %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
nrow(unique_values)
plot_top_five_receiving_countries(...){
plot_top_five_receiving_countries(...) {
plot_top_five_receiving_countries(...) {}
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
length(unique_values)
# your code here
df_2018 <- readRDS("~/BSc Economics - TiU/Semester 2/Programming in R and Python/Assignments/R/Rprogramming21_student/Lecture_4/sourcedata/clothing_exports_aggregated.rds")
df_2018 <- df_2018[df_2018["year"] == "2018",]
unique_values <- unique(df_2018["reporter_fullname_english"])
nrow(unique_values)
plot_top_five_receiving_countries <-- function(...){
# code from the previous chunk adjusted to deal with any given country code
}
plot_top_five_receiving_countries <- function(...){
# code from the previous chunk adjusted to deal with any given country code
}
plot_top_five_receiving_countries <- function(dataset, country_code){
# code from the previous chunk adjusted to deal with any given country code
df_tmp <- dataset %>% filter(reporter_iso == country_code) %>%
group_by(year) %>% slice_max(order_by = export_value_usd, n = 5)
# extract country name from dataset
country_name <- unique(df_tmp$reporter_fullname_english)
plot_title <- paste("Top five countries that", country_name, "exports clothing to")
ggplot(df_tmp, aes(x = reorder(partner_fullname_english, export_value_usd), y = export_value_usd)) +
geom_point() +
expand_limits(y = 0) +
ggtitle(plot_title) +
xlab("Importing country") +
ylab("Export value (x billion dollars)") +
coord_flip()
}
plot_top_five_receiving_countries(df_2018, country_code = "deu")
# your code here
for (i in countries) {
plot_top_five_receiving_countries(df_2018, country_code = i)
}
countries <- c("chn", "bgd", "deu", "ita", "ind")
# your code here
for (i in countries) {
plot_top_five_receiving_countries(df_2018, country_code = i)
}
# your code here
for (i in countries) {
print(plot_top_five_receiving_countries(df_2018, country_code = i))
}
knitr::opts_chunk$set(echo = FALSE)
library(rmarkdown)
# Here your code
1 + 1
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(ggplot2)
ggplot(mtcars, aes(x =  mpg)) +
geom_histogram()
